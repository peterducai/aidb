-- DROP SCHEMA aidb CASCADE;
CREATE SCHEMA aidb;
-- CREATE USER aidbadmin WITH ENCRYPTED PASSWORD 'aidb#@123';
-- GRANT ALL PRIVILEGES ON DATABASE aidb TO aidbadmin;

CREATE TYPE aidb.importance_type AS ENUM (
    'critical',
    'non-critical',
    'to_decomission'
);

CREATE TABLE aidb.country (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    iso TEXT,
    whole_name TEXT,
    nicename TEXT, 
    iso3 TEXT, 
    numcode INTEGER, 
    phonecode INTEGER
    );

CREATE TABLE aidb.location (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    long POINT,
    lat POINT
);

COMMENT ON TABLE aidb.location IS 'Location or GPS coordinates of IoT or device';

CREATE TABLE aidb.address (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    description TEXT,
    country  INTEGER REFERENCES aidb.country (id),
    town TEXT,
    street TEXT,
    zipcode TEXT);

COMMENT ON TABLE aidb.address IS 'Address of asset/person/company';

CREATE TABLE aidb.room (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    addr  INTEGER REFERENCES aidb.address (id),
    floor TEXT,
    room_number INTEGER,
    room_name TEXT
    );

COMMENT ON TABLE aidb.room IS 'Room in building where DC is situated';

CREATE TABLE aidb.contact (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    name TEXT,
    surname TEXT,
    phone TEXT,
    phone2 TEXT,
    email TEXT,
    email2 TEXT,
    other TEXT ---fax and others
);

COMMENT ON TABLE aidb.contact IS 'Contact to employee or company or vendor';

CREATE TABLE aidb.purchase_order (
    financial_id TEXT PRIMARY KEY,
    financial_location_id TEXT,
    invoice_number TEXT,
    purchase_url TEXT,
    contact INTEGER REFERENCES aidb.contact (id)
    );

COMMENT ON TABLE aidb.purchase_order IS 'purchase_order or invoice';

CREATE TABLE aidb.license (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    license_name TEXT,
    description TEXT,
    -- lic_type  aidb.license_model,
    support_contract_id TEXT,
    support_contract_url TEXT,
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id),
    expire_on DATE);

COMMENT ON TABLE aidb.license IS 'Any software license';

CREATE TABLE aidb.rack(
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    rack_name TEXT,
    rack_size INTEGER, --- number of positions 
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id),
    rack_room INTEGER REFERENCES aidb.room (id)
    );

COMMENT ON TABLE aidb.rack IS 'Rack with n positions in room';

CREATE TABLE aidb.corporation (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    name TEXT,
    tax_id TEXT,
    bank_acc_iban TEXT,
    bank_acc_swift TEXT,
    address INTEGER REFERENCES aidb.location (id),
    contact INTEGER REFERENCES aidb.contact (id),
    descr TEXT);

COMMENT ON TABLE aidb.corporation IS 'Corporation and main contact/address';

CREATE TABLE aidb.department (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    corp_id INTEGER REFERENCES aidb.corporation (id),
    dept_name TEXT,
    dept_descr TEXT);

COMMENT ON TABLE aidb.location IS 'Department in company';

CREATE TABLE aidb.employee (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    dept_id INTEGER REFERENCES aidb.department (id),
    contact INTEGER REFERENCES aidb.contact (id),
    descr TEXT);

COMMENT ON TABLE aidb.location IS 'Employee of company';

---
--- PROJECT
---
CREATE TABLE aidb.project (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    contact INTEGER REFERENCES aidb.employee (id),
    name TEXT,
    descr TEXT);

COMMENT ON TABLE aidb.location IS 'Project of team in department';

---
--- PROJECT MEMBER
---
CREATE TABLE aidb.proj_member (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    proj_id INTEGER REFERENCES aidb.project (id),
    employee INTEGER REFERENCES aidb.employee (id),
    role_descr TEXT);

COMMENT ON TABLE aidb.location IS 'Member of the project';

CREATE TYPE aidb.host_type AS ENUM ('physical',
    'virtual',
    'not_specified'
);


---
--- HOST category
---
CREATE TYPE aidb.host_category AS ENUM ('server',
    'hypervisor',
    'node', --- NUMA, cluster, blade?
    'router',
    'switch',
    'ups',
    'firewall'
    'workstation'
);

CREATE TABLE aidb.hw (
    serial_number TEXT PRIMARY KEY,
    manufacturer TEXT,
    model TEXT,
    warranty_to DATE,
    support_level TEXT,
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id));

COMMENT ON TABLE aidb.hw IS 'HW is hardware (which can be server, router, switch.. etc)';

CREATE TABLE aidb.hw_pos_in_rack(
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    rack INTEGER REFERENCES aidb.rack (id),
    rack_position TEXT, --- text, because it can be also "5-6".. taking 2 positions
    hw TEXT REFERENCES aidb.hw (serial_number)
    );

COMMENT ON TABLE aidb.hw_pos_in_rack IS 'Position of HW in rack';

CREATE TABLE aidb.motherboard (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    vendor TEXT REFERENCES aidb.hw (serial_number),  --- either it belongs to storage/server or it's single hdd in stock
    model TEXT, -- product
    serial_num INTEGER,
    warranty_to DATE,
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id));

COMMENT ON TABLE aidb.motherboard IS 'Motherboard info';

CREATE TYPE aidb.storage_type AS ENUM ('hdd', 'ssd', 'sd', 'other');

CREATE TABLE aidb.hdd (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    host TEXT REFERENCES aidb.hw (serial_number),  --- either it belongs to storage/server or it's single hdd in stock
    serial_num TEXT,
    manufacturer TEXT,
    storage_type aidb.storage_type,
    size_gb INTEGER,
    hdd_slot INTEGER,
    rpm  INTEGER,
    warranty_to DATE,
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id));

COMMENT ON TABLE aidb.hdd IS 'Hard disk info';

CREATE TABLE aidb.cpu (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    host TEXT REFERENCES aidb.hw (serial_number), 
    vendor TEXT, --- lscpu |grep 'Vendor'
    model TEXT, --- lscpu |grep 'Model name'   
    slot INTEGER,   --- TODO: add automaticaly
    cpu_speed TEXT,
    socket_number INTEGER,
    warranty_to DATE,
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id));

COMMENT ON TABLE aidb.cpu IS 'Physical CPU info';

CREATE TABLE aidb.ram (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    hw_host TEXT REFERENCES aidb.hw (serial_number),
    model TEXT, -- product
    vendor TEXT,
    module_description INTEGER,
    size TEXT,
    slot TEXT,
    ram_speed TEXT,
    warranty_to DATE,
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id));

CREATE TABLE aidb.power_supply (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    hw_host TEXT REFERENCES aidb.hw (serial_number),
    model TEXT, -- product
    vendor TEXT,
    module_description INTEGER,
    warranty_to DATE,
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id));

CREATE TABLE aidb.fan (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    hw_host TEXT REFERENCES aidb.hw (serial_number),
    model TEXT, -- product
    vendor TEXT,
    module_description INTEGER,
    warranty_to DATE,
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id));

CREATE TYPE aidb.nic_type AS ENUM ('ether',
    'fibre',
    'management_module',
    'infiniband'
);

CREATE TABLE aidb.network_interface (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    nic_t aidb.nic_type DEFAULT 'ether',
    hw_host TEXT REFERENCES aidb.hw (serial_number),
    model TEXT,
    vendor TEXT,
    warranty_to DATE,
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id));

CREATE TYPE aidb.os_type AS ENUM (
    'generic_os',
    'immutable_os' -- like Atomic or CoreOS
);



CREATE TABLE aidb.operating_system (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    hw_host TEXT REFERENCES aidb.hw (serial_number),
    vendor TEXT, --- Redhat, SUSE, Canonical, MS
    os_release TEXT,
    os_name TEXT, -- uname -o
    pretty_name TEXT,
    kernel_version TEXT,   --- uname -r / 4.14.18-300.fc27.x86_64
    arch text, --- uname -m/-p
    ostype aidb.os_type DEFAULT 'generic_os',
    supported_until DATE,
    license INTEGER REFERENCES aidb.license(id),
    purchase_order TEXT REFERENCES aidb.purchase_order (financial_id));


---
--- HOST (normal physical server)
---
CREATE TABLE aidb.host(
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    hostname TEXT,
    host_t aidb.host_type DEFAULT 'not_specified',
    physical_host TEXT REFERENCES aidb.hw (serial_number));

CREATE INDEX host_id_index ON aidb.host(id);

-- --- TODO: fix
-- CREATE TABLE aidb.content_view (
--     id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
--     host INTEGER REFERENCES aidb.host(id),
--     );

---
--- JUMP SERVERS / this table works other way round, we care about IP address and nothing else.. 
--- usually jumps are restricted only to create ssh tunnel to other machines... 
--- running any commands (including HW scan) is forbidden
---
CREATE TABLE aidb.jump_servers (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    host_t aidb.host_type DEFAULT 'not_specified',
    host INTEGER REFERENCES aidb.host(id),
    );

COMMENT ON TABLE aidb.jump_servers IS 'list of jump servers';

--- TODO: view on ip and fqdn

---
--- ROUTER
---
CREATE TABLE aidb.router (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    hostname TEXT,
    host_t aidb.host_type DEFAULT 'not_specified',
    physical_host TEXT REFERENCES aidb.hw (serial_number));

CREATE INDEX router_id_index ON aidb.router (id);

---
--- FIREWALL
---
CREATE TABLE aidb.firewall (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    hostname TEXT,
    host_t aidb.host_type DEFAULT 'not_specified',
    physical_host TEXT REFERENCES aidb.hw (serial_number));

CREATE INDEX fw_id_index ON aidb.firewall (id);


---
--- SWITCH
---
CREATE TYPE aidb.switch_type AS ENUM (
    'core',
    'spine-aggregation',
    'leaf-access-tor',
    'end_of_row-bor',
    'not_specified'
);

CREATE TABLE aidb.switch (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    hostname TEXT,
    host_t aidb.switch_type DEFAULT 'not_specified',
    physical_host TEXT REFERENCES aidb.hw (serial_number));

--- CREATE INDEX switch_id_index ON aidb.switch (id);



CREATE TABLE aidb.printer (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    hostname TEXT,
    description TEXT,
    physical_host TEXT REFERENCES aidb.hw (serial_number));


---
--- STORAGE SERVER
---
CREATE TABLE aidb.storage_server (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    hostname TEXT,
    host_t aidb.host_type DEFAULT 'not_specified',
    physical_host TEXT REFERENCES aidb.hw (serial_number));

CREATE INDEX storage_serv_id_index ON aidb.storage_server (id);

---
--- VIRTUAL HOST
---
CREATE TABLE aidb.virtual_host (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    host INTEGER REFERENCES aidb.host(id),
    vcpu INTEGER,
    ram INTEGER,
    vhd INTEGER);



---
--- Network PORT (physical port on NIC)
---
CREATE TABLE aidb.network_port (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    nic INTEGER REFERENCES aidb.network_interface(id),
    mac macaddr,
    ip_addr  inet,
    mtu INTEGER);


---
--- Network BOND
---
CREATE TABLE aidb.bond (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    bond_name TEXT,
    ip_addr inet,
    nic_port INTEGER REFERENCES aidb.network_port(id),
    bond_description TEXT);
---
--- network bridge
---
CREATE TABLE aidb.bridge (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    net_port INTEGER REFERENCES aidb.network_port(id),
    net_bond INTEGER REFERENCES aidb.bond(id),
    br_name TEXT);

-- TUN, TAP devices are entirely virtual
--  in contrast to other devices on your system (e.g eth0) which associated with a physical address.

-- A TUN device operates in the third  OSI layer (network) and used mostly for routing traffic,
--  while a TAP device operates in the second OSI layer (data link) and used to process Ethernet frames.
CREATE TABLE aidb.tun (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    tag TEXT,
    br INTEGER REFERENCES aidb.bridge(id),
    tun_name INTEGER);

CREATE TABLE aidb.tap (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    tag TEXT,
    br INTEGER REFERENCES aidb.bridge(id),
    tap_name INTEGER);

--- TODO: NIC

---
--- CONTAINER
---
CREATE TABLE aidb.container (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    cont_id TEXT,
    container_name TEXT,
    image TEXT,
    host INTEGER REFERENCES aidb.host(id));

---
--- SERVICES
---
CREATE TYPE aidb.service_type AS ENUM ('ntp',
    'dns',
    'web',
    'ssh',
    'firewall',
    'db',
    'network_storage',
    'not_specified'
);

CREATE TYPE aidb.cloud_service_type AS ENUM ('networking',
    'compute',
    'block_storage',
    'image_storage',
    'object_storage',
    'telemetry',
    'identity',
    'orchestration',
    'dashboard'
);

CREATE TABLE aidb.service (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    serv_type aidb.service_type,
    serv_name TEXT,
    descr TEXT,
    service_status TEXT,
    host INTEGER REFERENCES aidb.host(id));

CREATE TABLE aidb.dns_records (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    fqdn TEXT DEFAULT 'localhost.localdomain',
    ipv4 INTEGER REFERENCES aidb.network_port(id),
    bondipv4 INTEGER REFERENCES aidb.bond(id)
);

